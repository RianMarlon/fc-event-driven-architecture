services:
  walletcore-app:
    build: ./walletcore
    volumes:
      - ./walletcore:/app
    ports:
      - 8080:8080
    depends_on:
      walletcore-database:
        condition: service_healthy
      kafka:
        condition: service_healthy
      walletcore-migrate:
        condition: service_completed_successfully
    restart: unless-stopped

  walletcore-migrate:
    build: ./walletcore
    volumes:
      - ./walletcore:/app
    depends_on:
      walletcore-database:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Creating temporary migration folder...' &&
        mkdir -p /tmp/all-migrations &&
        cp -r ./migrations/* /tmp/all-migrations/ &&
        cp -r ./seeds/* /tmp/all-migrations/ &&
        echo 'Running all migrations and seeds...' &&
        migrate -path /tmp/all-migrations -database 'mysql://root:root@tcp(walletcore-database:3306)/wallet?parseTime=true' up &&
        echo 'All completed successfully'
      "
    restart: "no"

  walletcore-database:
    image: mysql:8.4
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: wallet
      MYSQL_PASSWORD: root
    ports:
      - 3306:3306
    volumes:
      - .docker/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysql -uroot -proot -e 'SELECT 1' wallet"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped

  balance-ms:
    build: ./balance-ms
    volumes:
      - ./balance-ms:/app
    ports:
      - 3003:3003
    depends_on:
      balance-ms-database:
        condition: service_healthy
      kafka:
        condition: service_healthy
      balance-ms-migrate:
        condition: service_completed_successfully
    restart: unless-stopped

  balance-ms-migrate:
    build: ./balance-ms
    volumes:
      - ./balance-ms:/app
    depends_on:
      balance-ms-database:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Creating temporary migration folder...' &&
        mkdir -p /tmp/all-migrations &&
        cp -r ./migrations/* /tmp/all-migrations/ &&
        cp -r ./seeds/* /tmp/all-migrations/ &&
        echo 'Running all migrations and seeds...' &&
        migrate -path /tmp/all-migrations -database 'postgres://root:root@balance-ms-database:5432/balance?sslmode=disable' up &&
        echo 'All completed successfully'
      "
    restart: "no"

  balance-ms-database:
    image: postgres:17.4
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: balance
    ports:
      - 5432:5432
    volumes:
      - .docker/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d balance && psql -U root -d balance -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped

  zookeeper:
    image: "confluentinc/cp-zookeeper:6.1.0"
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      TZ: America/Sao_Paulo 
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok"] 
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  kafka:
    image: "confluentinc/cp-enterprise-kafka:6.1.0"
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
    environment:
      TZ: America/Sao_Paulo
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      CONFLUENT_METRICS_ENABLE: 'false'
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.1.0
    container_name: control-center
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:29092
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONNECT_CLUSTER: http://kafka:8083
      PORT: 9021
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
